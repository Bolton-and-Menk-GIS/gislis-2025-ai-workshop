/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/rag/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run Rag */
        post: operations["run_rag_api_rag__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Health */
        get: operations["get_health_api_health__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pdf/parse": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Parse Pdf Endpoint */
        post: operations["parse_pdf_endpoint_api_pdf_parse_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assistant/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Models */
        get: operations["get_models_api_assistant_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assistant/ask": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ask Question */
        post: operations["ask_question_api_assistant_ask_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assistant/ask/prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Prompts
         * @description Return available prompt types for asking a question.
         */
        get: operations["get_prompts_api_assistant_ask_prompts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/survey/extract-legal-descriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Legal Description From Survey File
         * @description get structured survey information from a legal description.
         */
        post: operations["get_legal_description_from_survey_file_api_survey_extract_legal_descriptions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/survey/get-survey-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Survey Info From Legal
         * @description get structured survey information from a legal description.
         */
        post: operations["get_survey_info_from_legal_api_survey_get_survey_info_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AskPayload */
        AskPayload: {
            /**
             * Model
             * @default gpt-3.5-turbo
             */
            model: string;
            /**
             * Temperature
             * @default 0.7
             */
            temperature: number | null;
            /**
             * Max Tokens
             * @default 4096
             */
            max_tokens: number | null;
            /**
             * Timeout
             * @default 180
             */
            timeout: number | null;
            /** Context */
            context?: Record<string, never> | null;
            /** Text */
            text: string;
            /**
             * Prompt
             * @default ask
             */
            prompt: ("ask" | "simple" | "professor" | "contrarian" | "sassy") | null;
        };
        /** AskPromptOption */
        AskPromptOption: {
            /**
             * Name
             * @default ask
             * @enum {string}
             */
            name: "ask" | "simple" | "professor" | "contrarian" | "sassy";
            /** Label */
            label: string;
            /** Description */
            description?: string | null;
        };
        /** AskPromptOptions */
        AskPromptOptions: {
            /**
             * Options
             * @default [
             *       {
             *         "name": "ask",
             *         "label": "Standard",
             *         "description": "A straightforward, concise answer based on the provided context or general knowledge."
             *       },
             *       {
             *         "name": "simple",
             *         "label": "Explain like I'm 5",
             *         "description": "A simplified answer that is easy to understand, as if explaining to a child."
             *       },
             *       {
             *         "name": "professor",
             *         "label": "Professor",
             *         "description": "A detailed, in-depth explanation with background information and examples, as if you were a knowledgeable professor."
             *       },
             *       {
             *         "name": "contrarian",
             *         "label": "Contrarian",
             *         "description": "A response that challenges common assumptions and encourages critical thinking by presenting alternative viewpoints."
             *       },
             *       {
             *         "name": "sassy",
             *         "label": "Sassy",
             *         "description": "A cheeky, humorous answer that doesnâ€™t hold back on wit and sarcasm, making the interaction entertaining."
             *       }
             *     ]
             */
            options: components["schemas"]["AskPromptOption"][];
        };
        /** Body_get_legal_description_from_survey_file_api_survey_extract_legal_descriptions_post */
        Body_get_legal_description_from_survey_file_api_survey_extract_legal_descriptions_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** Body_parse_pdf_endpoint_api_pdf_parse_post */
        Body_parse_pdf_endpoint_api_pdf_parse_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** ChatResponse */
        ChatResponse: {
            /** Response */
            response: unknown;
            /** Context */
            context?: Record<string, never> | null;
            /** Model */
            model: string;
            usage?: components["schemas"]["CompletionUsage"] | null;
        };
        /** CompletionTokensDetails */
        CompletionTokensDetails: {
            /** Accepted Prediction Tokens */
            accepted_prediction_tokens?: number | null;
            /** Audio Tokens */
            audio_tokens?: number | null;
            /** Reasoning Tokens */
            reasoning_tokens?: number | null;
            /** Rejected Prediction Tokens */
            rejected_prediction_tokens?: number | null;
        } & {
            [key: string]: unknown;
        };
        /** CompletionUsage */
        CompletionUsage: {
            /** Completion Tokens */
            completion_tokens: number;
            /** Prompt Tokens */
            prompt_tokens: number;
            /** Total Tokens */
            total_tokens: number;
            completion_tokens_details?: components["schemas"]["CompletionTokensDetails"] | null;
            prompt_tokens_details?: components["schemas"]["PromptTokensDetails"] | null;
        } & {
            [key: string]: unknown;
        };
        /** Extent */
        Extent: {
            /** Lat */
            lat: number;
            /** Lon */
            lon: number;
            /** Radius */
            radius: number;
        };
        /** GetSurveyRequest */
        GetSurveyRequest: {
            /** Legaldescription */
            legalDescription: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HealthResponse */
        HealthResponse: {
            /** Status */
            status: string;
            /** Uptime */
            uptime: number;
        };
        /** LLMModel */
        LLMModel: {
            /** Name */
            name: string;
            /** Model */
            model: string;
            /**
             * Client
             * @enum {string}
             */
            client: "openai" | "ollama" | "huggingface";
            /**
             * Modified At
             * @default
             */
            modified_at: string | null;
            /**
             * Size
             * @default 0
             */
            size: number | null;
            /**
             * Digest
             * @default
             */
            digest: string | null;
            details: components["schemas"]["ModelDetails"];
        };
        /** LegalDescriptionEntry */
        LegalDescriptionEntry: {
            /** Index */
            index: number;
            /** Text */
            text: string;
            /** Confidence */
            confidence: number;
        };
        /** LegalDescriptionInfo */
        LegalDescriptionInfo: {
            /** Legaldescriptions */
            legalDescriptions?: components["schemas"]["LegalDescriptionEntry"][];
            /** Count */
            readonly count: number;
        };
        /** ModelDetails */
        ModelDetails: {
            /**
             * Parent Model
             * @default
             */
            parent_model: string | null;
            /** Format */
            format?: string | null;
            /** Family */
            family: string;
            /** Families */
            families?: string[] | null;
            /** Parameter Size */
            parameter_size?: string | null;
            /** Quantization Level */
            quantization_level?: string | null;
        };
        /** OllamaModelsResponse */
        OllamaModelsResponse: {
            /** Models */
            models: components["schemas"]["LLMModel"][];
        };
        /** PDFResult */
        PDFResult: {
            /** File Name */
            file_name?: string | null;
            /**
             * Num Pages
             * @default 0
             */
            num_pages: number;
            /**
             * Num Images
             * @default 0
             */
            num_images: number;
            /**
             * Metadata
             * @default {}
             */
            metadata: {
                [key: string]: string | null;
            };
            /**
             * Scanned
             * @default false
             */
            scanned: boolean;
            /**
             * Content
             * @default []
             */
            content: string[];
        };
        /** PromptTokensDetails */
        PromptTokensDetails: {
            /** Audio Tokens */
            audio_tokens?: number | null;
            /** Cached Tokens */
            cached_tokens?: number | null;
        } & {
            [key: string]: unknown;
        };
        /** RagRequest */
        RagRequest: {
            /** Prompt */
            prompt: string;
            extent: components["schemas"]["Extent"];
        };
        /** RagResponse */
        RagResponse: {
            /** Summary */
            summary: string;
            /** Features */
            features?: Record<string, never>[];
        };
        /** ReferencePoint */
        ReferencePoint: {
            /** Corner */
            corner: string;
            tieLine: components["schemas"]["TieLine"];
            /**
             * Divisionlevel
             * @enum {string}
             */
            divisionLevel: "section" | "quarter" | "forty";
            /** Referencewhere */
            referenceWhere: string;
        };
        /** SurveyInfo */
        SurveyInfo: {
            /** Section */
            section: number | string;
            /** Township */
            township: number | string;
            /** Townshipdirection */
            townshipDirection: string;
            /** Range */
            range: number | string;
            /** Rangedirection */
            rangeDirection: string;
            /** Quarterquarter */
            quarterQuarter: string;
            referencePoint: components["schemas"]["ReferencePoint"];
            /** Traverse */
            traverse: components["schemas"]["TraverseSegment"][];
            /** Area */
            area?: string | number | null;
            /** Whereclause */
            whereClause: string;
        };
        /** TieLine */
        TieLine: {
            /** Bearing */
            bearing: string;
            /** Distance */
            distance: number;
        };
        /** TraverseSegment */
        TraverseSegment: {
            /** Bearing */
            bearing: string;
            /** Distance */
            distance: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    run_rag_api_rag__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RagRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RagResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_health_api_health__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    parse_pdf_endpoint_api_pdf_parse_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_parse_pdf_endpoint_api_pdf_parse_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PDFResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_models_api_assistant_models_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OllamaModelsResponse"];
                };
            };
        };
    };
    ask_question_api_assistant_ask_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AskPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_prompts_api_assistant_ask_prompts_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AskPromptOptions"];
                };
            };
        };
    };
    get_legal_description_from_survey_file_api_survey_extract_legal_descriptions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_get_legal_description_from_survey_file_api_survey_extract_legal_descriptions_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegalDescriptionInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_survey_info_from_legal_api_survey_get_survey_info_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetSurveyRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SurveyInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
